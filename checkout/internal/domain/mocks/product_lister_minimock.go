package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i gitlab.ozon.dev/rragusskiy/homework-1/checkout/internal/domain.ProductLister -o ./mocks\product_lister_minimock.go -n ProductListerMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"gitlab.ozon.dev/rragusskiy/homework-1/checkout/internal/model"
)

// ProductListerMock implements domain.ProductLister
type ProductListerMock struct {
	t minimock.Tester

	funcGetProduct          func(ctx context.Context, sku uint32) (p1 model.ProductInfo, err error)
	inspectFuncGetProduct   func(ctx context.Context, sku uint32)
	afterGetProductCounter  uint64
	beforeGetProductCounter uint64
	GetProductMock          mProductListerMockGetProduct
}

// NewProductListerMock returns a mock for domain.ProductLister
func NewProductListerMock(t minimock.Tester) *ProductListerMock {
	m := &ProductListerMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetProductMock = mProductListerMockGetProduct{mock: m}
	m.GetProductMock.callArgs = []*ProductListerMockGetProductParams{}

	return m
}

type mProductListerMockGetProduct struct {
	mock               *ProductListerMock
	defaultExpectation *ProductListerMockGetProductExpectation
	expectations       []*ProductListerMockGetProductExpectation

	callArgs []*ProductListerMockGetProductParams
	mutex    sync.RWMutex
}

// ProductListerMockGetProductExpectation specifies expectation struct of the ProductLister.GetProduct
type ProductListerMockGetProductExpectation struct {
	mock    *ProductListerMock
	params  *ProductListerMockGetProductParams
	results *ProductListerMockGetProductResults
	Counter uint64
}

// ProductListerMockGetProductParams contains parameters of the ProductLister.GetProduct
type ProductListerMockGetProductParams struct {
	ctx context.Context
	sku uint32
}

// ProductListerMockGetProductResults contains results of the ProductLister.GetProduct
type ProductListerMockGetProductResults struct {
	p1  model.ProductInfo
	err error
}

// Expect sets up expected params for ProductLister.GetProduct
func (mmGetProduct *mProductListerMockGetProduct) Expect(ctx context.Context, sku uint32) *mProductListerMockGetProduct {
	if mmGetProduct.mock.funcGetProduct != nil {
		mmGetProduct.mock.t.Fatalf("ProductListerMock.GetProduct mock is already set by Set")
	}

	if mmGetProduct.defaultExpectation == nil {
		mmGetProduct.defaultExpectation = &ProductListerMockGetProductExpectation{}
	}

	mmGetProduct.defaultExpectation.params = &ProductListerMockGetProductParams{ctx, sku}
	for _, e := range mmGetProduct.expectations {
		if minimock.Equal(e.params, mmGetProduct.defaultExpectation.params) {
			mmGetProduct.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetProduct.defaultExpectation.params)
		}
	}

	return mmGetProduct
}

// Inspect accepts an inspector function that has same arguments as the ProductLister.GetProduct
func (mmGetProduct *mProductListerMockGetProduct) Inspect(f func(ctx context.Context, sku uint32)) *mProductListerMockGetProduct {
	if mmGetProduct.mock.inspectFuncGetProduct != nil {
		mmGetProduct.mock.t.Fatalf("Inspect function is already set for ProductListerMock.GetProduct")
	}

	mmGetProduct.mock.inspectFuncGetProduct = f

	return mmGetProduct
}

// Return sets up results that will be returned by ProductLister.GetProduct
func (mmGetProduct *mProductListerMockGetProduct) Return(p1 model.ProductInfo, err error) *ProductListerMock {
	if mmGetProduct.mock.funcGetProduct != nil {
		mmGetProduct.mock.t.Fatalf("ProductListerMock.GetProduct mock is already set by Set")
	}

	if mmGetProduct.defaultExpectation == nil {
		mmGetProduct.defaultExpectation = &ProductListerMockGetProductExpectation{mock: mmGetProduct.mock}
	}
	mmGetProduct.defaultExpectation.results = &ProductListerMockGetProductResults{p1, err}
	return mmGetProduct.mock
}

// Set uses given function f to mock the ProductLister.GetProduct method
func (mmGetProduct *mProductListerMockGetProduct) Set(f func(ctx context.Context, sku uint32) (p1 model.ProductInfo, err error)) *ProductListerMock {
	if mmGetProduct.defaultExpectation != nil {
		mmGetProduct.mock.t.Fatalf("Default expectation is already set for the ProductLister.GetProduct method")
	}

	if len(mmGetProduct.expectations) > 0 {
		mmGetProduct.mock.t.Fatalf("Some expectations are already set for the ProductLister.GetProduct method")
	}

	mmGetProduct.mock.funcGetProduct = f
	return mmGetProduct.mock
}

// When sets expectation for the ProductLister.GetProduct which will trigger the result defined by the following
// Then helper
func (mmGetProduct *mProductListerMockGetProduct) When(ctx context.Context, sku uint32) *ProductListerMockGetProductExpectation {
	if mmGetProduct.mock.funcGetProduct != nil {
		mmGetProduct.mock.t.Fatalf("ProductListerMock.GetProduct mock is already set by Set")
	}

	expectation := &ProductListerMockGetProductExpectation{
		mock:   mmGetProduct.mock,
		params: &ProductListerMockGetProductParams{ctx, sku},
	}
	mmGetProduct.expectations = append(mmGetProduct.expectations, expectation)
	return expectation
}

// Then sets up ProductLister.GetProduct return parameters for the expectation previously defined by the When method
func (e *ProductListerMockGetProductExpectation) Then(p1 model.ProductInfo, err error) *ProductListerMock {
	e.results = &ProductListerMockGetProductResults{p1, err}
	return e.mock
}

// GetProduct implements domain.ProductLister
func (mmGetProduct *ProductListerMock) GetProduct(ctx context.Context, sku uint32) (p1 model.ProductInfo, err error) {
	mm_atomic.AddUint64(&mmGetProduct.beforeGetProductCounter, 1)
	defer mm_atomic.AddUint64(&mmGetProduct.afterGetProductCounter, 1)

	if mmGetProduct.inspectFuncGetProduct != nil {
		mmGetProduct.inspectFuncGetProduct(ctx, sku)
	}

	mm_params := &ProductListerMockGetProductParams{ctx, sku}

	// Record call args
	mmGetProduct.GetProductMock.mutex.Lock()
	mmGetProduct.GetProductMock.callArgs = append(mmGetProduct.GetProductMock.callArgs, mm_params)
	mmGetProduct.GetProductMock.mutex.Unlock()

	for _, e := range mmGetProduct.GetProductMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.p1, e.results.err
		}
	}

	if mmGetProduct.GetProductMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetProduct.GetProductMock.defaultExpectation.Counter, 1)
		mm_want := mmGetProduct.GetProductMock.defaultExpectation.params
		mm_got := ProductListerMockGetProductParams{ctx, sku}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetProduct.t.Errorf("ProductListerMock.GetProduct got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetProduct.GetProductMock.defaultExpectation.results
		if mm_results == nil {
			mmGetProduct.t.Fatal("No results are set for the ProductListerMock.GetProduct")
		}
		return (*mm_results).p1, (*mm_results).err
	}
	if mmGetProduct.funcGetProduct != nil {
		return mmGetProduct.funcGetProduct(ctx, sku)
	}
	mmGetProduct.t.Fatalf("Unexpected call to ProductListerMock.GetProduct. %v %v", ctx, sku)
	return
}

// GetProductAfterCounter returns a count of finished ProductListerMock.GetProduct invocations
func (mmGetProduct *ProductListerMock) GetProductAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProduct.afterGetProductCounter)
}

// GetProductBeforeCounter returns a count of ProductListerMock.GetProduct invocations
func (mmGetProduct *ProductListerMock) GetProductBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProduct.beforeGetProductCounter)
}

// Calls returns a list of arguments used in each call to ProductListerMock.GetProduct.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetProduct *mProductListerMockGetProduct) Calls() []*ProductListerMockGetProductParams {
	mmGetProduct.mutex.RLock()

	argCopy := make([]*ProductListerMockGetProductParams, len(mmGetProduct.callArgs))
	copy(argCopy, mmGetProduct.callArgs)

	mmGetProduct.mutex.RUnlock()

	return argCopy
}

// MinimockGetProductDone returns true if the count of the GetProduct invocations corresponds
// the number of defined expectations
func (m *ProductListerMock) MinimockGetProductDone() bool {
	for _, e := range m.GetProductMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetProductMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetProductCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetProduct != nil && mm_atomic.LoadUint64(&m.afterGetProductCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetProductInspect logs each unmet expectation
func (m *ProductListerMock) MinimockGetProductInspect() {
	for _, e := range m.GetProductMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ProductListerMock.GetProduct with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetProductMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetProductCounter) < 1 {
		if m.GetProductMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ProductListerMock.GetProduct")
		} else {
			m.t.Errorf("Expected call to ProductListerMock.GetProduct with params: %#v", *m.GetProductMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetProduct != nil && mm_atomic.LoadUint64(&m.afterGetProductCounter) < 1 {
		m.t.Error("Expected call to ProductListerMock.GetProduct")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ProductListerMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetProductInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ProductListerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ProductListerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetProductDone()
}
