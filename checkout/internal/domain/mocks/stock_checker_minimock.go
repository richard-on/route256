package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i gitlab.ozon.dev/rragusskiy/homework-1/checkout/internal/domain.StockChecker -o ./mocks\stock_checker_minimock.go -n StockCheckerMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"gitlab.ozon.dev/rragusskiy/homework-1/checkout/internal/model"
)

// StockCheckerMock implements domain.StockChecker
type StockCheckerMock struct {
	t minimock.Tester

	funcStocks          func(ctx context.Context, sku uint32) (spa1 []*model.Stock, err error)
	inspectFuncStocks   func(ctx context.Context, sku uint32)
	afterStocksCounter  uint64
	beforeStocksCounter uint64
	StocksMock          mStockCheckerMockStocks
}

// NewStockCheckerMock returns a mock for domain.StockChecker
func NewStockCheckerMock(t minimock.Tester) *StockCheckerMock {
	m := &StockCheckerMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.StocksMock = mStockCheckerMockStocks{mock: m}
	m.StocksMock.callArgs = []*StockCheckerMockStocksParams{}

	return m
}

type mStockCheckerMockStocks struct {
	mock               *StockCheckerMock
	defaultExpectation *StockCheckerMockStocksExpectation
	expectations       []*StockCheckerMockStocksExpectation

	callArgs []*StockCheckerMockStocksParams
	mutex    sync.RWMutex
}

// StockCheckerMockStocksExpectation specifies expectation struct of the StockChecker.Stocks
type StockCheckerMockStocksExpectation struct {
	mock    *StockCheckerMock
	params  *StockCheckerMockStocksParams
	results *StockCheckerMockStocksResults
	Counter uint64
}

// StockCheckerMockStocksParams contains parameters of the StockChecker.Stocks
type StockCheckerMockStocksParams struct {
	ctx context.Context
	sku uint32
}

// StockCheckerMockStocksResults contains results of the StockChecker.Stocks
type StockCheckerMockStocksResults struct {
	spa1 []*model.Stock
	err  error
}

// Expect sets up expected params for StockChecker.Stocks
func (mmStocks *mStockCheckerMockStocks) Expect(ctx context.Context, sku uint32) *mStockCheckerMockStocks {
	if mmStocks.mock.funcStocks != nil {
		mmStocks.mock.t.Fatalf("StockCheckerMock.Stocks mock is already set by Set")
	}

	if mmStocks.defaultExpectation == nil {
		mmStocks.defaultExpectation = &StockCheckerMockStocksExpectation{}
	}

	mmStocks.defaultExpectation.params = &StockCheckerMockStocksParams{ctx, sku}
	for _, e := range mmStocks.expectations {
		if minimock.Equal(e.params, mmStocks.defaultExpectation.params) {
			mmStocks.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmStocks.defaultExpectation.params)
		}
	}

	return mmStocks
}

// Inspect accepts an inspector function that has same arguments as the StockChecker.Stocks
func (mmStocks *mStockCheckerMockStocks) Inspect(f func(ctx context.Context, sku uint32)) *mStockCheckerMockStocks {
	if mmStocks.mock.inspectFuncStocks != nil {
		mmStocks.mock.t.Fatalf("Inspect function is already set for StockCheckerMock.Stocks")
	}

	mmStocks.mock.inspectFuncStocks = f

	return mmStocks
}

// Return sets up results that will be returned by StockChecker.Stocks
func (mmStocks *mStockCheckerMockStocks) Return(spa1 []*model.Stock, err error) *StockCheckerMock {
	if mmStocks.mock.funcStocks != nil {
		mmStocks.mock.t.Fatalf("StockCheckerMock.Stocks mock is already set by Set")
	}

	if mmStocks.defaultExpectation == nil {
		mmStocks.defaultExpectation = &StockCheckerMockStocksExpectation{mock: mmStocks.mock}
	}
	mmStocks.defaultExpectation.results = &StockCheckerMockStocksResults{spa1, err}
	return mmStocks.mock
}

// Set uses given function f to mock the StockChecker.Stocks method
func (mmStocks *mStockCheckerMockStocks) Set(f func(ctx context.Context, sku uint32) (spa1 []*model.Stock, err error)) *StockCheckerMock {
	if mmStocks.defaultExpectation != nil {
		mmStocks.mock.t.Fatalf("Default expectation is already set for the StockChecker.Stocks method")
	}

	if len(mmStocks.expectations) > 0 {
		mmStocks.mock.t.Fatalf("Some expectations are already set for the StockChecker.Stocks method")
	}

	mmStocks.mock.funcStocks = f
	return mmStocks.mock
}

// When sets expectation for the StockChecker.Stocks which will trigger the result defined by the following
// Then helper
func (mmStocks *mStockCheckerMockStocks) When(ctx context.Context, sku uint32) *StockCheckerMockStocksExpectation {
	if mmStocks.mock.funcStocks != nil {
		mmStocks.mock.t.Fatalf("StockCheckerMock.Stocks mock is already set by Set")
	}

	expectation := &StockCheckerMockStocksExpectation{
		mock:   mmStocks.mock,
		params: &StockCheckerMockStocksParams{ctx, sku},
	}
	mmStocks.expectations = append(mmStocks.expectations, expectation)
	return expectation
}

// Then sets up StockChecker.Stocks return parameters for the expectation previously defined by the When method
func (e *StockCheckerMockStocksExpectation) Then(spa1 []*model.Stock, err error) *StockCheckerMock {
	e.results = &StockCheckerMockStocksResults{spa1, err}
	return e.mock
}

// Stocks implements domain.StockChecker
func (mmStocks *StockCheckerMock) Stocks(ctx context.Context, sku uint32) (spa1 []*model.Stock, err error) {
	mm_atomic.AddUint64(&mmStocks.beforeStocksCounter, 1)
	defer mm_atomic.AddUint64(&mmStocks.afterStocksCounter, 1)

	if mmStocks.inspectFuncStocks != nil {
		mmStocks.inspectFuncStocks(ctx, sku)
	}

	mm_params := &StockCheckerMockStocksParams{ctx, sku}

	// Record call args
	mmStocks.StocksMock.mutex.Lock()
	mmStocks.StocksMock.callArgs = append(mmStocks.StocksMock.callArgs, mm_params)
	mmStocks.StocksMock.mutex.Unlock()

	for _, e := range mmStocks.StocksMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.spa1, e.results.err
		}
	}

	if mmStocks.StocksMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmStocks.StocksMock.defaultExpectation.Counter, 1)
		mm_want := mmStocks.StocksMock.defaultExpectation.params
		mm_got := StockCheckerMockStocksParams{ctx, sku}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmStocks.t.Errorf("StockCheckerMock.Stocks got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmStocks.StocksMock.defaultExpectation.results
		if mm_results == nil {
			mmStocks.t.Fatal("No results are set for the StockCheckerMock.Stocks")
		}
		return (*mm_results).spa1, (*mm_results).err
	}
	if mmStocks.funcStocks != nil {
		return mmStocks.funcStocks(ctx, sku)
	}
	mmStocks.t.Fatalf("Unexpected call to StockCheckerMock.Stocks. %v %v", ctx, sku)
	return
}

// StocksAfterCounter returns a count of finished StockCheckerMock.Stocks invocations
func (mmStocks *StockCheckerMock) StocksAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStocks.afterStocksCounter)
}

// StocksBeforeCounter returns a count of StockCheckerMock.Stocks invocations
func (mmStocks *StockCheckerMock) StocksBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStocks.beforeStocksCounter)
}

// Calls returns a list of arguments used in each call to StockCheckerMock.Stocks.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmStocks *mStockCheckerMockStocks) Calls() []*StockCheckerMockStocksParams {
	mmStocks.mutex.RLock()

	argCopy := make([]*StockCheckerMockStocksParams, len(mmStocks.callArgs))
	copy(argCopy, mmStocks.callArgs)

	mmStocks.mutex.RUnlock()

	return argCopy
}

// MinimockStocksDone returns true if the count of the Stocks invocations corresponds
// the number of defined expectations
func (m *StockCheckerMock) MinimockStocksDone() bool {
	for _, e := range m.StocksMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.StocksMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterStocksCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcStocks != nil && mm_atomic.LoadUint64(&m.afterStocksCounter) < 1 {
		return false
	}
	return true
}

// MinimockStocksInspect logs each unmet expectation
func (m *StockCheckerMock) MinimockStocksInspect() {
	for _, e := range m.StocksMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StockCheckerMock.Stocks with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.StocksMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterStocksCounter) < 1 {
		if m.StocksMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to StockCheckerMock.Stocks")
		} else {
			m.t.Errorf("Expected call to StockCheckerMock.Stocks with params: %#v", *m.StocksMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcStocks != nil && mm_atomic.LoadUint64(&m.afterStocksCounter) < 1 {
		m.t.Error("Expected call to StockCheckerMock.Stocks")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *StockCheckerMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockStocksInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *StockCheckerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *StockCheckerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockStocksDone()
}
