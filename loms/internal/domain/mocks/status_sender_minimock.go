package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i gitlab.ozon.dev/rragusskiy/homework-1/loms/internal/domain.StatusSender -o ./mocks\status_sender_minimock.go -n StatusSenderMock

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// StatusSenderMock implements domain.StatusSender
type StatusSenderMock struct {
	t minimock.Tester

	funcSendWithKey          func(id int64, key string, message []byte)
	inspectFuncSendWithKey   func(id int64, key string, message []byte)
	afterSendWithKeyCounter  uint64
	beforeSendWithKeyCounter uint64
	SendWithKeyMock          mStatusSenderMockSendWithKey
}

// NewStatusSenderMock returns a mock for domain.StatusSender
func NewStatusSenderMock(t minimock.Tester) *StatusSenderMock {
	m := &StatusSenderMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.SendWithKeyMock = mStatusSenderMockSendWithKey{mock: m}
	m.SendWithKeyMock.callArgs = []*StatusSenderMockSendWithKeyParams{}

	return m
}

type mStatusSenderMockSendWithKey struct {
	mock               *StatusSenderMock
	defaultExpectation *StatusSenderMockSendWithKeyExpectation
	expectations       []*StatusSenderMockSendWithKeyExpectation

	callArgs []*StatusSenderMockSendWithKeyParams
	mutex    sync.RWMutex
}

// StatusSenderMockSendWithKeyExpectation specifies expectation struct of the StatusSender.SendWithKey
type StatusSenderMockSendWithKeyExpectation struct {
	mock   *StatusSenderMock
	params *StatusSenderMockSendWithKeyParams

	Counter uint64
}

// StatusSenderMockSendWithKeyParams contains parameters of the StatusSender.SendWithKey
type StatusSenderMockSendWithKeyParams struct {
	id      int64
	key     string
	message []byte
}

// Expect sets up expected params for StatusSender.SendWithKey
func (mmSendWithKey *mStatusSenderMockSendWithKey) Expect(id int64, key string, message []byte) *mStatusSenderMockSendWithKey {
	if mmSendWithKey.mock.funcSendWithKey != nil {
		mmSendWithKey.mock.t.Fatalf("StatusSenderMock.SendWithKey mock is already set by Set")
	}

	if mmSendWithKey.defaultExpectation == nil {
		mmSendWithKey.defaultExpectation = &StatusSenderMockSendWithKeyExpectation{}
	}

	mmSendWithKey.defaultExpectation.params = &StatusSenderMockSendWithKeyParams{id, key, message}
	for _, e := range mmSendWithKey.expectations {
		if minimock.Equal(e.params, mmSendWithKey.defaultExpectation.params) {
			mmSendWithKey.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSendWithKey.defaultExpectation.params)
		}
	}

	return mmSendWithKey
}

// Inspect accepts an inspector function that has same arguments as the StatusSender.SendWithKey
func (mmSendWithKey *mStatusSenderMockSendWithKey) Inspect(f func(id int64, key string, message []byte)) *mStatusSenderMockSendWithKey {
	if mmSendWithKey.mock.inspectFuncSendWithKey != nil {
		mmSendWithKey.mock.t.Fatalf("Inspect function is already set for StatusSenderMock.SendWithKey")
	}

	mmSendWithKey.mock.inspectFuncSendWithKey = f

	return mmSendWithKey
}

// Return sets up results that will be returned by StatusSender.SendWithKey
func (mmSendWithKey *mStatusSenderMockSendWithKey) Return() *StatusSenderMock {
	if mmSendWithKey.mock.funcSendWithKey != nil {
		mmSendWithKey.mock.t.Fatalf("StatusSenderMock.SendWithKey mock is already set by Set")
	}

	if mmSendWithKey.defaultExpectation == nil {
		mmSendWithKey.defaultExpectation = &StatusSenderMockSendWithKeyExpectation{mock: mmSendWithKey.mock}
	}

	return mmSendWithKey.mock
}

// Set uses given function f to mock the StatusSender.SendWithKey method
func (mmSendWithKey *mStatusSenderMockSendWithKey) Set(f func(id int64, key string, message []byte)) *StatusSenderMock {
	if mmSendWithKey.defaultExpectation != nil {
		mmSendWithKey.mock.t.Fatalf("Default expectation is already set for the StatusSender.SendWithKey method")
	}

	if len(mmSendWithKey.expectations) > 0 {
		mmSendWithKey.mock.t.Fatalf("Some expectations are already set for the StatusSender.SendWithKey method")
	}

	mmSendWithKey.mock.funcSendWithKey = f
	return mmSendWithKey.mock
}

// SendWithKey implements domain.StatusSender
func (mmSendWithKey *StatusSenderMock) SendWithKey(id int64, key string, message []byte) {
	mm_atomic.AddUint64(&mmSendWithKey.beforeSendWithKeyCounter, 1)
	defer mm_atomic.AddUint64(&mmSendWithKey.afterSendWithKeyCounter, 1)

	if mmSendWithKey.inspectFuncSendWithKey != nil {
		mmSendWithKey.inspectFuncSendWithKey(id, key, message)
	}

	mm_params := &StatusSenderMockSendWithKeyParams{id, key, message}

	// Record call args
	mmSendWithKey.SendWithKeyMock.mutex.Lock()
	mmSendWithKey.SendWithKeyMock.callArgs = append(mmSendWithKey.SendWithKeyMock.callArgs, mm_params)
	mmSendWithKey.SendWithKeyMock.mutex.Unlock()

	for _, e := range mmSendWithKey.SendWithKeyMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmSendWithKey.SendWithKeyMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSendWithKey.SendWithKeyMock.defaultExpectation.Counter, 1)
		mm_want := mmSendWithKey.SendWithKeyMock.defaultExpectation.params
		mm_got := StatusSenderMockSendWithKeyParams{id, key, message}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSendWithKey.t.Errorf("StatusSenderMock.SendWithKey got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		return

	}
	if mmSendWithKey.funcSendWithKey != nil {
		mmSendWithKey.funcSendWithKey(id, key, message)
		return
	}
	mmSendWithKey.t.Fatalf("Unexpected call to StatusSenderMock.SendWithKey. %v %v %v", id, key, message)

}

// SendWithKeyAfterCounter returns a count of finished StatusSenderMock.SendWithKey invocations
func (mmSendWithKey *StatusSenderMock) SendWithKeyAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSendWithKey.afterSendWithKeyCounter)
}

// SendWithKeyBeforeCounter returns a count of StatusSenderMock.SendWithKey invocations
func (mmSendWithKey *StatusSenderMock) SendWithKeyBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSendWithKey.beforeSendWithKeyCounter)
}

// Calls returns a list of arguments used in each call to StatusSenderMock.SendWithKey.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSendWithKey *mStatusSenderMockSendWithKey) Calls() []*StatusSenderMockSendWithKeyParams {
	mmSendWithKey.mutex.RLock()

	argCopy := make([]*StatusSenderMockSendWithKeyParams, len(mmSendWithKey.callArgs))
	copy(argCopy, mmSendWithKey.callArgs)

	mmSendWithKey.mutex.RUnlock()

	return argCopy
}

// MinimockSendWithKeyDone returns true if the count of the SendWithKey invocations corresponds
// the number of defined expectations
func (m *StatusSenderMock) MinimockSendWithKeyDone() bool {
	for _, e := range m.SendWithKeyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SendWithKeyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSendWithKeyCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSendWithKey != nil && mm_atomic.LoadUint64(&m.afterSendWithKeyCounter) < 1 {
		return false
	}
	return true
}

// MinimockSendWithKeyInspect logs each unmet expectation
func (m *StatusSenderMock) MinimockSendWithKeyInspect() {
	for _, e := range m.SendWithKeyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StatusSenderMock.SendWithKey with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SendWithKeyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSendWithKeyCounter) < 1 {
		if m.SendWithKeyMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to StatusSenderMock.SendWithKey")
		} else {
			m.t.Errorf("Expected call to StatusSenderMock.SendWithKey with params: %#v", *m.SendWithKeyMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSendWithKey != nil && mm_atomic.LoadUint64(&m.afterSendWithKeyCounter) < 1 {
		m.t.Error("Expected call to StatusSenderMock.SendWithKey")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *StatusSenderMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockSendWithKeyInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *StatusSenderMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *StatusSenderMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockSendWithKeyDone()
}
